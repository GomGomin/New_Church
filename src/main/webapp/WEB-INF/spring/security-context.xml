<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">


	<security:http use-expressions="true" entry-point-ref="customAuthenticationEntryPoint">
		<!--공지 관련 security 처리-->
		<security:intercept-url pattern="/notice/edit" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/notice/removeNotice" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/notice/setNewNotice" access="hasRole('ADMIN')" />
		
		<!--앨범 관련 security 처리-->
		<security:intercept-url pattern="/album/add" access="isAuthenticated()" />
		<security:intercept-url pattern="/album/modify" access="isAuthenticated()" />
		
		<!--픽업 관련 security 처리-->
		<security:intercept-url pattern="/pickup/list" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/pickup/add" access="hasRole('USER')" />
		<security:intercept-url pattern="/pickup/modify" access="hasRole('USER')" />
		<security:intercept-url pattern="/pickup/detail" access="hasRole('USER')" />
				
		<!--주보 관련 security 처리-->
		<security:intercept-url pattern="/weekly/add" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/weekly/modify" access="hasRole('ADMIN')" />
    
		<!--유저 관련 security 처리-->
		<security:intercept-url pattern="/listUsers" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/detailUser" access="isAuthenticated()" />
		<security:intercept-url pattern="/updateUser" access="isAuthenticated()" />
		<security:intercept-url pattern="/updatePw" access="isAuthenticated()" />
    
		<!--관리자 페이지 security 처리-->
		<security:intercept-url pattern="/admin/main" access="hasRole('ADMIN')" />

		<security:intercept-url pattern="/schedule/register" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/praise/register" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/worship/register" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/event/register" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/schedule/modify" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/praise/modify" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/worship/modify" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/event/modify" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/schedule/adminRemove" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/praise/adminRemove" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/worship/adminRemove" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/event/adminRemove" access="hasRole('ADMIN')" />
    
		<security:intercept-url pattern="/**" access="permitAll" />

		<security:form-login login-page="/login"
				default-target-url="/"
				authentication-failure-handler-ref="loginFailureHandler"
				username-parameter="username"
				password-parameter="password"/>
		<security:session-management>
			<security:concurrency-control max-sessions="1" expired-url="/"/>
		</security:session-management>
		<security:csrf/>
		<security:logout logout-success-url="/"/>
		<!-- intercept-url 설정 -->
		<security:access-denied-handler ref="customAccessDeniedHandler" />
	</security:http>

	<bean id="customAccessDeniedHandler" class="com.church.handler.CustomAccessDeniedHandler" />
	<bean id="customAuthenticationEntryPoint" class="com.church.handler.CustomAuthenticationEntryPoint" />
	<bean id="loginFailureHandler" class="com.church.handler.LoginFailureHandler" />


	<!-- 암호화를 위한 passwordEncoder -->
	<bean id="bcryptpasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- DB연동은 data-source만 지정해주면 된다 -->
	<!-- 로그인시 입력한 아이디(username), 암호(password)의 일치 여부를 따로 클래스로 만들어 구현하는 방법도 있으나 -->
	<!-- 아래와 같이 비교 인증 절차를 Spring Security 에 일임하는 것이 편하다. -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider>
		<security:password-encoder hash="bcrypt"/>
		<security:jdbc-user-service data-source-ref="dataSource"
			users-by-username-query="SELECT username, password, enabled FROM users WHERE username=?"
			authorities-by-username-query="SELECT username, authority FROM users WHERE username=?"
		/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>